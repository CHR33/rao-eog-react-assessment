{"version":3,"sources":["Features/Weather/reducer.ts","Features/Weather/saga.ts","Features/MetricDropDown/reducer.ts","Features/MetricDropDown/saga.ts","store/sagas.js","Features/MetricChart/reducer.ts","store/reducers.ts","store/index.ts","components/Chip.tsx","Features/Weather/Weather.tsx","components/Header.tsx","components/Wrapper.tsx","Features/MetricDropDown/MetricDropDown.tsx","Features/SelectedMetricList/SelectedMetricList.tsx","Features/MetricChart/useMetricChart.ts","Features/MetricChart/MetricChart.tsx","Features/Dashboard/Dashboard.tsx","App.tsx","index.js"],"names":["slice","createSlice","name","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","reducers","weatherDataRecevied","state","action","payload","weatherApiErrorReceived","reducer","actions","apiErrorReceived","watchApiError","call","toast","error","takeEvery","WeatherActions","type","metrics","recentlyDeletedMetric","recentlySelectedMetric","selectedMetrics","metricDataRecevied","metricApiErrorReceived","console","log","metricSelectionUpdated","filter","m","includes","seletedMetric","deletedMetric","MetricActions","root","all","spawn","weatherSaga","metricsSaga","measurementDataMap","measurementsDataRecevied","metric","measurements","measurementsDataDeleted","metricName","measurementsDataApiErrorReceived","latestMeasurementDataReceived","newMeasurement","value","push","weather","weatherReducer","metricsReducer","measurementsReducer","combineReducers","withStyles","theme","background","palette","secondary","main","label","color","primary","Chip","getWeather","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","useSelector","useQuery","query","variables","result","fetching","data","useEffect","message","getWeatherForLocation","LinearProgress","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","children","container","width","padding","listItem","backgroundColor","getMetrics","MetricDropDown","styles","placeholder","length","option","debug","filterSelectedOptions","loading","multiple","options","renderInput","params","TextField","renderOption","renderTags","tags","getTagProps","map","tag","index","onChange","_","display","flexWrap","margin","card","marginRight","marginBottom","getSelectedMetricNames","React","useState","recentMetricValueMap","setRecentMetricValuesMap","useSubscription","subscriptionResult","previousState","Object","keys","Card","key","CardContent","getSelectedMetrics","getMeasurements","after","Date","valueOf","MetricChart","alias","chartData","useMemo","reduce","concat","measurementQuery","pause","executeQuery","getMultipleMeasurements","useMetricChart","hasTempData","some","item","hasPSIData","hasInjData","ResponsiveContainer","LineChart","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","tickFormatter","date","moment","unix","format","YAxis","orientation","yAxisId","Label","offset","style","textAnchor","Legend","Tooltip","labelFormatter","colorCodes","Line","activeDot","r","dot","isAnimationActive","stroke","oilTemp","waterTemp","flareTemp","tubingPressure","casingPressure","injValveOpen","flexDirection","Dashboard","SelectedMetricList","subscriptionClient","SubscriptionClient","reconnect","client","createClient","url","exchanges","defaultExchanges","subscriptionExchange","forwardSubscription","operation","request","store","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","sagas","createMuiTheme","default","App","CssBaseline","Header","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ff36019.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type WeatherForLocation = {\n  description: string;\n  locationName: string;\n  temperatureinCelsius: number;\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  temperatureinCelsius: 0,\n  temperatureinFahrenheit: 0,\n  description: '',\n  locationName: '',\n};\n\nconst toF = (c: number) => (c * 9) / 5 + 32;\n\nconst slice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    weatherDataRecevied: (state, action: PayloadAction<WeatherForLocation>) => {\n      const { description, locationName, temperatureinCelsius } = action.payload;\n      state.temperatureinCelsius = temperatureinCelsius;\n      state.temperatureinFahrenheit = toF(temperatureinCelsius);\n      state.description = description;\n      state.locationName = locationName;\n    },\n    weatherApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n  },\n});\n\nexport const { reducer } = slice;\nexport const { actions } = slice;\n","import { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { PayloadAction } from \"redux-starter-kit\";\nimport { actions as WeatherActions, ApiErrorAction } from \"./reducer\";\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(WeatherActions.weatherApiErrorReceived.type, apiErrorReceived);\n}\n","import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type Metrics = string[];\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  metrics: [] as Metrics,\n  recentlyDeletedMetric: '',\n  recentlySelectedMetric: '',\n  selectedMetrics: [] as Metrics,\n};\n\nconst slice = createSlice({\n  name: 'metrics',\n  initialState,\n  reducers: {\n    metricDataRecevied: (state, action: PayloadAction<Metrics>) => {\n      state.metrics = [...action.payload];\n    },\n    metricApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => {\n      console.log('error getting metrics');\n    },\n    metricSelectionUpdated: (state, action: PayloadAction<Metrics>) => {\n      const [seletedMetric] = action.payload.filter(m => !state.selectedMetrics.includes(m))\n      const [deletedMetric] = state.selectedMetrics.filter(m => !action.payload.includes(m))\n      state.selectedMetrics = action.payload;\n\n      if (deletedMetric) {\n        state.recentlyDeletedMetric = deletedMetric;\n      }\n\n      if (seletedMetric) {\n        state.recentlySelectedMetric = seletedMetric;\n      }\n    },\n  },\n});\n\nexport const { reducer } = slice;\nexport const { actions } = slice;\n","import { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { actions as MetricActions, ApiErrorAction } from './reducer';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(MetricActions.metricApiErrorReceived.type, apiErrorReceived);\n}\n","import { all, spawn } from 'redux-saga/effects';\nimport weatherSaga from '../Features/Weather/saga';\nimport metricsSaga from '../Features/MetricDropDown/saga';\n\nexport default function* root() {\n  yield all([spawn(weatherSaga), spawn(metricsSaga)]);\n}\n","import { createSlice, PayloadAction } from 'redux-starter-kit';\nimport { NewMeasurement, Measurement, MultipleMeasurements } from '../../models';\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  measurementDataMap: {} as { [x: string]: Measurement[] },\n};\n\nconst slice = createSlice({\n  name: 'metricsChartData',\n  initialState,\n  reducers: {\n    measurementsDataRecevied: (state, action: PayloadAction<MultipleMeasurements>) => {\n      const { metric, measurements } = action.payload;\n\n      state.measurementDataMap[metric] = measurements;\n    },\n    measurementsDataDeleted: (state, action: PayloadAction<string>) => {\n      const metricName = action.payload;\n\n      state.measurementDataMap[metricName] = [];\n    },\n    measurementsDataApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => {\n      console.log('error getting metrics measurement data');\n    },\n    latestMeasurementDataReceived: (state, action: PayloadAction<NewMeasurement>) => {\n      const { newMeasurement } = action.payload;\n      const { metric, value } = newMeasurement;\n      if (state.measurementDataMap[metric]) {\n        state.measurementDataMap[metric].push({\n          ...newMeasurement,\n          [metric]: value,\n        });\n      }\n    },\n  },\n});\n\nexport const { reducer } = slice;\nexport const { actions } = slice;\n","import { reducer as weatherReducer } from '../Features/Weather/reducer';\nimport { reducer as metricsReducer } from '../Features/MetricDropDown/reducer';\nimport { reducer as measurementsReducer } from '../Features/MetricChart/reducer';\n\nexport default {\n  weather: weatherReducer,\n  metrics: metricsReducer,\n  measurements: measurementsReducer,\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { combineReducers } from 'redux-starter-kit';\nimport sagas from './sagas';\nimport reducers from './reducers';\n\nconst reducer = combineReducers(reducers);\nexport type IState = ReturnType<typeof reducer>;\n\nexport default () => {\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(reducer, composeEnhancers(middlewares));\n\n  sagaMiddleware.run(sagas);\n\n  return store;\n};\n","import Chip from '@material-ui/core/Chip';\nimport { withStyles, Theme } from '@material-ui/core/styles';\n\nconst cardStyles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.secondary.main,\n  },\n  label: {\n    color: theme.palette.primary.main,\n  },\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { actions } from './reducer';\nimport Chip from '../../components/Chip';\nimport { IState } from '../../store';\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = (state: IState) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName,\n  };\n};\n\nexport default () => <Weather />;\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(getWeather);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong,\n    },\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.weatherApiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch(actions.weatherDataRecevied(getWeatherForLocation));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`} />;\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Weather from '../Features/Weather/Weather';\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"rao's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} EOG React Visualization Assessment\n        </Typography>\n        <Weather />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    height: '100vh',\n  },\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","import React, { useEffect, ChangeEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AutoComplete from '@material-ui/lab/Autocomplete';\nimport { TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useQuery } from 'urql';\nimport Chip from '../../components/Chip';\nimport { actions } from './reducer';\nimport { IState } from '../../store';\n\nconst useStyles = makeStyles({\n  container: {\n    width: '40%',\n    padding: '15px',\n  },\n  listItem: {\n    '&:hover': {\n      backgroundColor: '#bbdefb',\n    },\n  },\n});\n\nconst query = `\n  query {\n    getMetrics\n  }\n`;\n\nconst getMetrics = (state: IState) => state.metrics;\n\nexport default () => <MetricDropDown />;\n\nconst MetricDropDown = () => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n  const { metrics, selectedMetrics } = useSelector(getMetrics);\n  const [result] = useQuery({ query });\n\n  const { fetching, data, error } = result;\n\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.metricApiErrorReceived({ error: error.message }));\n      return;\n    }\n\n    if (!data) return;\n\n    dispatch(actions.metricDataRecevied(data.getMetrics));\n  }, [dispatch, data, error]);\n\n  const onMetricSelection = (_: ChangeEvent<{}>, value: any) => {\n    if (value) {\n      dispatch(actions.metricSelectionUpdated(value));\n    } else {\n      dispatch(actions.metricSelectionUpdated([]));\n    }\n  };\n\n  const placeholder = selectedMetrics.length > 0 ? '' : 'select...';\n\n  return (\n    <div className={styles.container}>\n      <AutoComplete\n        classes={{\n          option: styles.listItem,\n        }}\n        debug\n        filterSelectedOptions\n        loading={fetching}\n        multiple\n        options={metrics}\n        renderInput={params => <TextField {...params} placeholder={placeholder} variant=\"outlined\" />}\n        renderOption={option => <Typography variant=\"body2\">{option}</Typography>}\n        renderTags={(tags, getTagProps) =>\n          tags.map((tag, index) => <Chip variant=\"outlined\" label={tag} {...getTagProps({ index })} />)\n        }\n        onChange={onMetricSelection}\n        value={selectedMetrics}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSubscription } from 'urql';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { actions } from '../MetricChart/reducer';\nimport { NewMeasurement } from '../../models';\nimport { IState } from '../../store';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexGrow: 1,\n    margin: '20px',\n    width: '60%',\n  },\n  card: {\n    marginRight: '1rem',\n    marginBottom: '1rem',\n  },\n});\n\n\nconst metricSubscriptionQuery = `\n  subscription {\n    newMeasurement{\n      metric\n      at\n      value\n      unit\n    }\n  }\n`;\n\nconst getSelectedMetricNames = (state: IState) => state.metrics.selectedMetrics;\n\nexport default () => {\n  const classes = useStyles();\n  const selectedMetrics = useSelector(getSelectedMetricNames);\n  const dispatch = useDispatch();\n  const [recentMetricValueMap, setRecentMetricValuesMap] = React.useState<{[x: string]: number}>({});\n\n  const [subscriptionResult] = useSubscription<NewMeasurement>({\n    query: metricSubscriptionQuery,\n    variables: {},\n  });\n\n  React.useEffect(() => {\n    const { data } = subscriptionResult;\n    if (data) {\n      const { metric, value } = data.newMeasurement;\n      if (selectedMetrics.includes(metric)) {\n        setRecentMetricValuesMap((previousState) => ({\n          ...previousState,\n          [metric]: value\n        }));\n      } else {\n        setRecentMetricValuesMap((previousState) => {\n          const { [metric]: omit, ...remainingMap } = previousState;\n          return remainingMap;\n        });\n      }\n      dispatch(actions.latestMeasurementDataReceived(data))\n    }\n  }, [dispatch, subscriptionResult, selectedMetrics]);\n\n  return (\n    <section className={classes.root}>\n      {Object.keys(recentMetricValueMap).map((metric) => (\n        <Card className={classes.card} key={`metric-${metric}`}>\n          <CardContent>\n            <Typography variant=\"h6\">{metric}</Typography>\n            <Typography variant=\"h3\">{recentMetricValueMap[metric]}</Typography>\n          </CardContent>\n        </Card>\n      ))}\n    </section>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from 'urql';\nimport { IState } from '../../store';\nimport { Measurement, MultipleMeasurements } from '../../models';\n\nimport { actions } from './reducer';\n\nconst getQuery = (alias: string) => (`\n\tquery($measurementQuery: [MeasurementQuery]) {\n\t\tgetMultipleMeasurements(input: $measurementQuery) {\n\t\t\tmetric,\n\t\t\tmeasurements {\n\t\t\t\tat,\n\t\t\t\tmetric,\n\t\t\t\t${alias}: value,\n\t\t\t\tunit\n\t\t\t}\n\t\t}\n\t}\n`);\n\nconst getSelectedMetrics = (state: IState) => state.metrics;\n\nconst getMeasurements = (state: IState) => state.measurements.measurementDataMap;\n\nconst currentTime = new Date().valueOf();\nconst thirtyMinutes = 90 * 60 * 1000;\nconst after = currentTime - thirtyMinutes;\n\nexport const useMetricChart = () => {\n  const measurementDataMap = useSelector(getMeasurements);\n  const {\n    selectedMetrics,\n    recentlySelectedMetric,\n    recentlyDeletedMetric\n  } = useSelector(getSelectedMetrics);\n  const dispatch = useDispatch();\n\n  const chartData = React.useMemo(() => {\n    return Object.keys(measurementDataMap).reduce((result, key) => {\n      return result.concat(measurementDataMap[key]);\n    }, [] as Measurement[]);\n  }, [measurementDataMap]);\n\n  const measurementQuery = React.useMemo(\n    () => {\n    if (recentlySelectedMetric) {\n      return  [{ metricName: recentlySelectedMetric, after, }];\n    }\n  }, [recentlySelectedMetric]);\n\n  const [result, executeQuery] = useQuery<{ getMultipleMeasurements: MultipleMeasurements[] }>({\n    query: getQuery(recentlySelectedMetric),\n    variables: {\n      measurementQuery,\n    },\n    pause: !measurementQuery,\n  });\n\n  const { data } = result;\n\n  React.useEffect(() => {\n    if (!data) return;\n\n    const { getMultipleMeasurements } = data;\n\n    dispatch(actions.measurementsDataRecevied(getMultipleMeasurements[0]));\n  }, [data, dispatch, executeQuery]);\n\n  React.useEffect(() => {\n    if (recentlyDeletedMetric) {\n      dispatch(actions.measurementsDataRecevied({\n        metric: recentlyDeletedMetric,\n        measurements: []\n      }));\n    }\n  }, [dispatch, recentlyDeletedMetric]);\n\n  return {\n    chartData,\n    selectedMetrics,\n  };\n};\n","import React from 'react';\nimport moment from 'moment';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Label, ResponsiveContainer, Tooltip } from 'recharts';\n\nimport { useMetricChart } from './useMetricChart';\n\nexport default () => <MetricChart />;\n\nconst MetricChart = () => {\n  const { chartData, selectedMetrics } = useMetricChart();\n\n  const xAxisTickFormatter = (date: number) => moment.unix(date).format('LT');\n\n  const hasTempData = selectedMetrics.some(item => ['waterTemp', 'oilTemp', 'flareTemp'].includes(item));\n  const hasPSIData = selectedMetrics.some(item => ['tubingPressure', 'casingPressure'].includes(item));\n  const hasInjData = selectedMetrics.some(item => ['injValveOpen'].includes(item));\n\n  if (selectedMetrics.length === 0) {\n    return null;\n  }\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={500}>\n      <LineChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"at\" domain={[\"auto\", \"auto\"]} type=\"number\" tickFormatter={xAxisTickFormatter} />\n        {hasTempData && (\n          <YAxis orientation=\"left\" yAxisId=\"F\">\n            <Label offset={20} position=\"bottom\" style={{ textAnchor: \"middle\" }} value=\"F\" />\n          </YAxis>\n        )}\n        {hasPSIData && (\n          <YAxis yAxisId=\"PSI\">\n            <Label offset={20} position=\"bottom\" style={{ textAnchor: \"middle\" }} value=\"PSI\" />\n          </YAxis>\n        )}\n        {hasInjData && (\n          <YAxis orientation=\"left\" yAxisId=\"%\">\n            <Label offset={20} position=\"bottom\" style={{ textAnchor: \"middle\" }} value=\"%\" />\n          </YAxis>\n        )}\n        <Legend />\n        <Tooltip labelFormatter={label => moment(label).format('LLLL')} />\n        {selectedMetrics.length > 0\n          ? selectedMetrics.map(metricName => {\n              const color = colorCodes[metricName] as string;\n              switch (metricName) {\n                case 'waterTemp':\n                case 'flareTemp':\n                case 'oilTemp':\n                  return (\n                    <Line\n                      activeDot={{ r: 5 }}\n                      dataKey={metricName}\n                      dot={false}\n                      isAnimationActive={false}\n                      name={metricName}\n                      key={`line-${metricName}`}\n                      stroke={color}\n                      type=\"monotone\"\n                      yAxisId=\"F\"\n                    />\n                  );\n                case 'tubingPressure':\n                case 'casingPressure':\n                  return (\n                    <Line\n                      activeDot={{ r: 5 }}\n                      dataKey={metricName}\n                      dot={false}\n                      isAnimationActive={false}\n                      key={`line-${metricName}`}\n                      name={metricName}\n                      stroke={color}\n                      type=\"monotone\"\n                      yAxisId=\"PSI\"\n                    />\n                  );\n                case 'injValveOpen':\n                  return (\n                    <Line\n                      activeDot={{ r: 5 }}\n                      dataKey={metricName}\n                      dot={false}\n                      isAnimationActive={false}\n                      key={`line-${metricName}`}\n                      name={metricName}\n                      stroke={color}\n                      type=\"monotone\"\n                      yAxisId=\"%\"\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })\n          : null}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst colorCodes = {\n  oilTemp: '#311B92',\n  waterTemp: '#F57F17',\n  flareTemp: '#FFAB00',\n  tubingPressure: '#BF360C',\n  casingPressure: '#880E4F',\n  injValveOpen: '#006064',\n} as { [x: string]: string };\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { MetricDropDown } from '../MetricDropDown';\nimport { SelectedMetricList } from '../SelectedMetricList';\nimport { MetricChart } from '../MetricChart';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  metrics: {\n    display: 'flex',\n  },\n});\n\nexport default () => <Dashboard />;\n\nconst Dashboard = () => {\n  const styles = useStyles();\n\n  return (\n    <article className={styles.container}>\n      <div className={styles.metrics}>\n        <SelectedMetricList />\n        <MetricDropDown />\n      </div>\n      <MetricChart />\n    </article>\n  );\n};\n","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport { ToastContainer } from \"react-toastify\";\nimport { Provider as ApolloClientProvider, createClient, subscriptionExchange, defaultExchanges } from \"urql\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport createStore from \"./store\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\nimport Dashboard from './Features/Dashboard/Dashboard';\n\nconst subscriptionClient = new SubscriptionClient('wss://react.eogresources.com/graphql', { reconnect: true });\n\nconst client = createClient({\n  url: \"https://react.eogresources.com/graphql\",\n  exchanges: [\n    ...defaultExchanges,\n    subscriptionExchange({\n      forwardSubscription: operation => subscriptionClient.request(operation),\n    }),\n  ],\n});\n\nconst store = createStore();\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: 'rgb(39,49,66)',\n    },\n    secondary: {\n      main: 'rgb(197,208,222)',\n    },\n    background: {\n      default: 'rgb(226,231,238)',\n    },\n  },\n});\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Provider store={store}>\n      <Wrapper>\n        <Header />\n        <Dashboard />\n        <ToastContainer />\n      </Wrapper>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default () => (\n  <ApolloClientProvider value={client}>\n    <App />\n  </ApolloClientProvider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}