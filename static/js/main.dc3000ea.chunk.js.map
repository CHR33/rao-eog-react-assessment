{"version":3,"sources":["Features/Weather/reducer.ts","Features/Weather/saga.ts","Features/MetricDropDown/reducer.ts","Features/MetricDropDown/saga.ts","store/sagas.js","Features/MetricChart/reducer.ts","store/reducers.ts","store/index.ts","components/Chip.tsx","Features/Weather/Weather.tsx","components/Header.tsx","components/Wrapper.tsx","Features/MetricDropDown/MetricDropDown.tsx","Features/SelectedMetricList/SelectedMetricList.tsx","Features/MetricChart/useMetricChart.ts","Features/MetricChart/MetricChart.tsx","Features/Dashboard/Dashboard.tsx","App.tsx","index.js"],"names":["slice","createSlice","name","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","reducers","weatherDataRecevied","state","action","payload","weatherApiErrorReceived","reducer","actions","apiErrorReceived","watchApiError","call","toast","error","takeEvery","WeatherActions","type","metrics","selectedMetrics","metricDataRecevied","metricApiErrorReceived","console","log","metricSelectionUpdated","MetricActions","root","all","spawn","weatherSaga","metricsSaga","measurements","measurementsDataRecevied","measurementsDataApiErrorReceived","newMeasurementDataReceived","newMeasurement","forEach","measurement","metric","push","shift","weather","weatherReducer","metricsReducer","measurementsReducer","combineReducers","withStyles","theme","background","palette","secondary","main","label","color","primary","Chip","getWeather","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","useSelector","useQuery","query","variables","result","fetching","data","useEffect","message","getWeatherForLocation","LinearProgress","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","children","container","width","padding","listItem","backgroundColor","getMetrics","MetricDropDown","styles","placeholder","length","option","debug","filterSelectedOptions","loading","multiple","options","renderInput","params","TextField","renderOption","renderTags","tags","getTagProps","map","tag","index","onChange","_","value","display","flexWrap","margin","card","marginRight","marginBottom","getSelectedMetrics","getMeasurements","latestValues","React","useMemo","list","metricName","latestValue","Card","key","CardContent","after","Date","valueOf","useMetricChart","useSubscription","subscriptionResult","measurementQuery","chartData","newChartData","item","flat","newValue","pause","executeQuery","getMultipleMeasurements","MetricChart","hasTempData","some","includes","hasPSIData","hasInjData","ResponsiveContainer","LineChart","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","tickFormatter","date","moment","unix","format","YAxis","orientation","yAxisId","Label","offset","style","textAnchor","Legend","Tooltip","labelFormatter","colorCodes","Line","activeDot","r","dot","isAnimationActive","stroke","oilTemp","waterTemp","flareTemp","tubingPressure","casingPressure","injValveOpen","flexDirection","Dashboard","SelectedMetricList","subscriptionClient","SubscriptionClient","reconnect","client","createClient","url","exchanges","defaultExchanges","subscriptionExchange","forwardSubscription","operation","request","store","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","sagas","createMuiTheme","default","App","CssBaseline","Header","ReactDOM","render","document","getElementById"],"mappings":"iTAqBMA,EAAQC,YAAY,CACxBC,KAAM,UACNC,aAXmB,CACnBC,qBAAsB,EACtBC,wBAAyB,EACzBC,YAAa,GACbC,aAAc,IAQdC,SAAU,CACRC,oBAAqB,SAACC,EAAOC,GAA+C,IAAD,EACbA,EAAOC,QAA3DN,EADiE,EACjEA,YAAaC,EADoD,EACpDA,aAAcH,EADsC,EACtCA,qBACnCM,EAAMN,qBAAuBA,EAC7BM,EAAML,wBAToB,EASUD,EATL,EAAI,GAUnCM,EAAMJ,YAAcA,EACpBI,EAAMH,aAAeA,GAEvBM,wBAAyB,SAACH,EAAOC,GAAR,OAAkDD,MAIlEI,EAAUd,EAAMc,QAChBC,EAAUf,EAAMe,Q,WChCnBC,G,WAIeC,GAJzB,SAAUD,EAAiBL,GAA3B,iEACE,OADF,SACQO,YAAKC,IAAMC,MAAP,0BAAiCT,EAAOC,QAAQQ,QAD5D,uCAIe,SAAUH,IAAV,iEACb,OADa,SACPI,YAAUC,EAAeT,wBAAwBU,KAAMP,GADhD,uCCDf,IAKMhB,EAAQC,YAAY,CACxBC,KAAM,UACNC,aAPmB,CACnBqB,QAAS,GACTC,gBAAiB,IAMjBjB,SAAU,CACRkB,mBAAoB,SAAChB,EAAOC,GAC1BD,EAAMc,QAAN,YAAoBb,EAAOC,UAE7Be,uBAAwB,SAACjB,EAAOC,GAC9BiB,QAAQC,IAAI,0BAEdC,uBAAwB,SAACpB,EAAOC,GAC9BD,EAAMe,gBAAkBd,EAAOC,YAKxBE,EAAUd,EAAMc,QAChBC,EAAUf,EAAMe,Q,WCzBnBC,G,WAIeC,GAJzB,SAAUD,EAAiBL,GAA3B,iEACE,OADF,SACQO,YAAKC,IAAMC,MAAP,0BAAiCT,EAAOC,QAAQQ,QAD5D,uCAIe,SAAUH,IAAV,iEACb,OADa,SACPI,YAAUU,EAAcJ,uBAAuBJ,KAAMP,GAD9C,uC,eCLUgB,GAAV,SAAUA,IAAV,iEACb,OADa,SACPC,YAAI,CACRC,YAAMC,GACND,YAAME,KAHK,uCCGf,IAIMpC,EAAQC,YAAY,CACxBC,KAAM,mBACNC,aANmB,CACnBkC,aAAc,IAMd7B,SAAU,CACR8B,yBAA0B,SAAC5B,EAAOC,GAChCD,EAAM2B,aAAN,YAAyB1B,EAAOC,UAElC2B,iCAAkC,SAAC7B,EAAOC,GACxCiB,QAAQC,IAAI,2CAEdW,2BAA4B,SAAC9B,EAAOC,GAA2C,IACrE8B,EAAmB9B,EAAOC,QAA1B6B,eACFJ,EAAe3B,EAAM2B,aAAarC,QACxCqC,EAAaK,SAAQ,SAACC,GAChBA,EAAYC,SAAWH,EAAeG,SACxCD,EAAYN,aAAaQ,KAAKJ,GAC9BJ,EAAaS,gBAOVhC,EAAUd,EAAMc,QAChBC,EAAUf,EAAMe,QC/Bd,GACbgC,QAASC,EACTxB,QAASyB,EACTZ,aAAca,GCAVpC,EAAUqC,0BAAgB3C,G,2ICIjB4C,eARI,SAACC,GAAD,MAAmB,CACpCrB,KAAM,CACJsB,WAAYD,EAAME,QAAQC,UAAUC,MAEtCC,MAAO,CACLC,MAAON,EAAME,QAAQK,QAAQH,SAGlBL,CAAuBS,KCQhCC,EAAa,SAACpD,GAAmB,IAAD,EAC2BA,EAAMqC,QACrE,MAAO,CACL1C,wBAHkC,EAC5BA,wBAGNC,YAJkC,EACHA,YAI/BC,aALkC,EACUA,eAQjC,cACb,OAAO,kBAAC,GAAD,OAGHwD,GAAU,WACd,IAAMC,EAAcC,cAEdC,EAAU,CACdC,SAAUH,EAAYG,UAAY,QAClCC,UAAWJ,EAAYI,YAAc,SAEjCC,EAAWC,cAPG,EAQ2CC,YAAYT,GAAnEzD,EARY,EAQZA,wBAAyBC,EARb,EAQaA,YAAaC,EAR1B,EAQ0BA,aAR1B,EAUHiE,YAAS,CACxBC,MAlCO,0JAmCPC,UAAW,CACTR,aAHGS,EAVa,oBAgBZC,EAA0BD,EAA1BC,SAAUC,EAAgBF,EAAhBE,KAAMzD,EAAUuD,EAAVvD,MAWxB,OAVA0D,qBAAU,WACR,GAAI1D,EACFiD,EAAStD,EAAQF,wBAAwB,CAAEO,MAAOA,EAAM2D,gBAG1D,GAAKF,EAAL,CALc,IAMNG,EAA0BH,EAA1BG,sBACRX,EAAStD,EAAQN,oBAAoBuE,OACpC,CAACX,EAAUQ,EAAMzD,IAEhBwD,EAAiB,kBAACK,EAAA,EAAD,MAEd,kBAAC,EAAD,CAAMvB,MAAK,qBAAgBnD,EAAhB,aAAiCD,EAAjC,gBAAoDD,EAApD,WCtDd6E,GAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAIC,cACb,IAAMC,EAAUJ,KAGhB,OACE,kBAACK,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKhC,MAAM,UAAUiC,UAAWN,EAAQF,MAJrD,QAIP,uCAGA,kBAAC,GAAD,SCpBFF,GAAYC,YAAW,CAC3BU,QAAS,CACPC,OAAQ,WASGC,GALW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrBV,EAAUJ,KAChB,OAAO,uBAAKU,UAAWN,EAAQO,SAAUG,I,oBCDrCd,GAAYC,YAAW,CAC3Bc,UAAW,CACTC,MAAO,MACPC,QAAS,QAEXC,SAAU,CACR,UAAW,CACTC,gBAAiB,cAWjBC,GAAa,SAAC5F,GAClB,OAAOA,EAAMc,SAGA,cACb,OAAO,kBAAC,GAAD,OAGH+E,GAAiB,WACrB,IAAMC,EAAStB,KACTb,EAAWC,cAFU,EAGUC,YAAY+B,IAAzC9E,EAHmB,EAGnBA,QAASC,EAHU,EAGVA,gBAHU,EAIV+C,YAAS,CAAEC,MAlBnB,uCAkBFE,EAJoB,oBAMnBC,EAA0BD,EAA1BC,SAAUC,EAAgBF,EAAhBE,KAAMzD,EAAUuD,EAAVvD,MAExB0D,qBAAU,WACJ1D,EACFiD,EAAStD,EAAQY,uBAAuB,CAAEP,MAAOA,EAAM2D,WAIpDF,GAELR,EAAStD,EAAQW,mBAAmBmD,EAAKyB,eACxC,CAACjC,EAAUQ,EAAMzD,IAEpB,IAQMqF,EAAchF,EAAgBiF,OAAS,EAAI,GAAI,YAErD,OACE,yBAAKd,UAAWY,EAAOP,WACrB,kBAAC,KAAD,CACEX,QAAS,CACPqB,OAAQH,EAAOJ,UAEjBQ,OAAK,EACLC,uBAAqB,EACrBC,QAASlC,EACTmC,UAAQ,EACRC,QAASxF,EACTyF,YAAa,SAACC,GAAD,OAAY,kBAACC,GAAA,EAAD,iBAAeD,EAAf,CAAuBT,YAAaA,EAAad,QAAQ,eAClFyB,aAAc,SAACT,GAAD,OAAY,kBAACjB,EAAA,EAAD,CAAYC,QAAQ,SAASgB,IACvDU,WAAY,SAACC,EAAMC,GACjB,OAAOD,EAAKE,KAAI,SAACC,EAAKC,GAAN,OACd,kBAAC,EAAD,eAAM/B,QAAQ,WAAWjC,MAAO+D,GAASF,EAAY,CAAEG,gBAE3DC,SA3BoB,SAACC,EAAoBC,GAE7CxD,EADGwD,EACM9G,EAAQe,uBAAuB+F,GAE/B9G,EAAQe,uBAAuB,MAwBpC+F,MAAOpG,M,oBC5ETyD,GAAYC,YAAW,CAC3BnD,KAAM,CACJ8F,QAAS,OACTC,SAAU,OACV1C,SAAU,EACV2C,OAAQ,OACR9B,MAAO,OAET+B,KAAM,CACJC,YAAa,OACbC,aAAc,UAIZC,GAAqB,SAAC1H,GAAD,OAAmBA,EAAMc,QAAQC,iBACtD4G,GAAkB,SAAC3H,GAAD,OAAmBA,EAAM2B,aAAaA,cAE/C,cACb,IAAMiD,EAAUJ,KACVzD,EAAkB8C,YAAY6D,IAC9B/F,EAAekC,YAAY8D,IAE3BC,EAAeC,IAAMC,SAAQ,WACjC,IAAMC,EAAO,GAYb,OAXApG,EAAaK,SAAQ,SAACC,GACpBlB,EAAgBiB,SAAQ,SAACgG,GACvB,GAAI/F,EAAYC,SAAW8F,EAAY,CAAC,IAAD,EACf/F,EAAYN,aAAarC,OAAO,GAA/C2I,EAD8B,oBAErCF,EAAK5F,KAAK,CACR3C,KAAMwI,EACNb,MAAOc,EAAYd,eAKpBY,IACN,CAACpG,EAAcZ,IAElB,OACE,6BAASmE,UAAWN,EAAQtD,MACvBsG,EAAad,KAAI,gBAAGtH,EAAH,EAAGA,KAAM2H,EAAT,EAASA,MAAT,OAChB,kBAACe,GAAA,EAAD,CAAMhD,UAAWN,EAAQ2C,KAAMY,IAAG,iBAAY3I,IAC5C,kBAAC4I,GAAA,EAAD,KACE,kBAACpD,EAAA,EAAD,CAAYC,QAAQ,MAAMzF,GAC1B,kBAACwF,EAAA,EAAD,CAAYC,QAAQ,MAAMkC,U,sVC3CxC,IAyBMO,GAAqB,SAAC1H,GAAD,OAAmBA,EAAMc,SAE9C6G,GAAkB,SAAC3H,GAAD,mBAAuBA,EAAM2B,aAAaA,eAI5D0G,IAFc,IAAIC,MAAOC,UACR,KAGVC,GAAiB,WAC5B,IAAM7G,EAAekC,YAAY8D,IACzB5G,EAAoB8C,YAAY6D,IAAhC3G,gBACF4C,EAAWC,cAHiB,EAKL6E,YAAgC,CAC3D1E,MAzByB,yGA0BzBC,UAAW,KAFN0E,EAL2B,oBAU5BC,EAAmBd,IAAMC,SAAQ,WACrC,OAAO/G,EAAgB+F,KAAI,SAACkB,GAAD,MAAiB,CAC1CA,aACAK,eAED,CAACtH,IAEE6H,EAAYf,IAAMC,SAAQ,WAC9B,IAAMe,EAAgC,GAUtC,OARAlH,EAAaK,SAAQ,SAAC8G,GAAD,OAAUD,EAAa1G,KAAK2G,EAAKnH,iBAEnCkH,EAAaE,OAAOjC,KAAI,SAAAgC,GACzC,IAAME,E,4VAAQ,IAAQF,GAEtB,OADAE,EAASA,EAAS9G,QAAU8G,EAAS7B,MAC9B6B,OAIR,CAACrH,IA7B8B,EA+BHmC,YAA8D,CAC3FC,MAjEO,sOAkEPC,UAAW,CACT2E,oBAEJM,MAAmC,IAA5BN,EAAiB3C,SApCU,mBA+B3B/B,EA/B2B,KA+BnBiF,EA/BmB,KAuC1B/E,EAASF,EAATE,KAgBR,OAdA0D,IAAMzD,WAAU,WACd,GAAKD,EAAL,CADoB,IAGdgF,EAA4BhF,EAA5BgF,wBAENxF,EAAStD,EAAQuB,yBAAyBuH,OACzC,CAAChF,EAAMR,EAAUuF,IAEpBrB,IAAMzD,WAAU,WACVsE,EAAmBvE,MACrBR,EAAStD,EAAQyB,2BAA2B4G,EAAmBvE,SAEhE,CAACR,EAAU+E,IAEP,CACLE,YACA7H,oBC5FW,qBACb,kBAAC,GAAD,OAGIqI,GAAc,WAAO,IAAD,EACeZ,KAA/BI,EADgB,EAChBA,UAAW7H,EADK,EACLA,gBAObsI,EAActI,EAAgBuI,MAAK,SAACR,GAAD,MAAU,CAAC,YAAa,UAAW,aAAaS,SAAST,MAC5FU,EAAazI,EAAgBuI,MAAK,SAACR,GAAD,MAAU,CAAC,iBAAkB,kBAAkBS,SAAST,MAC1FW,EAAa1I,EAAgBuI,MAAK,SAACR,GAAD,MAAU,CAAC,gBAAgBS,SAAST,MAE5E,OAAyB,IAArBF,EAAU5C,OACL,KAIP,kBAAC0D,GAAA,EAAD,CAAqBlE,MAAM,OAAOJ,OAAQ,KACxC,kBAACuE,GAAA,EAAD,CACExF,KAAMyE,EACNtB,OAAQ,CAAEsC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAEjD,kBAACC,GAAA,EAAD,CAAeC,gBAAgB,QAC/B,kBAACC,GAAA,EAAD,CACEC,QAAQ,KACRC,OAAQ,CAAC,OAAQ,QACjBvJ,KAAK,SACLwJ,cAxBqB,SAACC,GAC1B,OAAOC,KAAOC,KAAKF,GAAMG,OAAO,SAyB7BpB,GACC,kBAACqB,GAAA,EAAD,CACEC,YAAY,OACZC,QAAQ,KAER,kBAACC,GAAA,EAAD,CACEC,OAAQ,GACRhG,SAAS,SACTiG,MAAO,CAAEC,WAAY,UACrB7D,MAAM,OAIXqC,GACC,kBAACkB,GAAA,EAAD,CAAOE,QAAQ,OACb,kBAACC,GAAA,EAAD,CACEC,OAAQ,GACRhG,SAAS,SACTiG,MAAO,CAAEC,WAAY,UACrB7D,MAAM,SAIXsC,GACC,kBAACiB,GAAA,EAAD,CACEC,YAAY,OACZC,QAAQ,KAER,kBAACC,GAAA,EAAD,CACEC,OAAQ,GACRhG,SAAS,SACTiG,MAAO,CAAEC,WAAY,UACrB7D,MAAM,OAIZ,kBAAC8D,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CAASC,eAAgB,SAACnI,GAAD,OAAWuH,KAAOvH,GAAOyH,OAAO,WACxD1J,EAAgBiF,OAAS,EACtBjF,EAAgB+F,KAAI,SAAAkB,GAClB,IAAM/E,EAAQmI,GAAWpD,GACzB,OAAOA,GACL,IAAK,YACL,IAAK,YACL,IAAK,UACH,OACE,kBAACqD,GAAA,EAAD,CACEC,UAAW,CAAEC,EAAG,GAChBpB,QAASnC,EACTwD,KAAK,EACLC,mBAAmB,EACnBjM,KAAMwI,EACNG,IAAG,eAAUH,GACb0D,OAAQzI,EACRpC,KAAK,WACL+J,QAAQ,MAGd,IAAK,iBACL,IAAK,iBACH,OACE,kBAACS,GAAA,EAAD,CACEC,UAAW,CAAEC,EAAG,GAChBpB,QAASnC,EACTwD,KAAK,EACLC,mBAAmB,EACnBtD,IAAG,eAAUH,GACbxI,KAAMwI,EACN0D,OAAQzI,EACRpC,KAAK,WACL+J,QAAQ,QAGd,IAAK,eACH,OACE,kBAACS,GAAA,EAAD,CACEC,UAAW,CAAEC,EAAG,GAChBpB,QAASnC,EACTwD,KAAK,EACLC,mBAAmB,EACnBtD,IAAG,eAAUH,GACbxI,KAAMwI,EACN0D,OAAQzI,EACRpC,KAAK,WACL+J,QAAQ,MAGd,QACE,OAAO,SAIjB,QAMAQ,GAAa,CACjBO,QAAS,UACTC,UAAW,UACXC,UAAW,UACXC,eAAgB,UAChBC,eAAgB,UAChBC,aAAc,WCxIVxH,GAAYC,YAAW,CAC3Bc,UAAW,CACT6B,QAAS,OACT6E,cAAe,UAEjBnL,QAAS,CACPsG,QAAS,UAIE,cACb,OAAO,kBAAC,GAAD,OAGH8E,GAAY,WAChB,IAAMpG,EAAStB,KAEf,OACE,6BAASU,UAAWY,EAAOP,WACzB,yBAAKL,UAAWY,EAAOhF,SACrB,kBAACqL,GAAD,MACA,kBAAC,GAAD,OAEF,kBAAC,GAAD,QCjBAC,GAAqB,IAAIC,qBAAmB,sCAAuC,CAAEC,WAAW,IAEhGC,GAASC,YAAa,CAC1BC,IAAK,yCACLC,UAAU,GAAD,mBAAMC,KAAN,CAAwBC,YAAqB,CACpDC,oBAAqB,SAAAC,GAAS,OAC9BV,GAAmBW,QAAQD,UAIzBE,GVbS,WACb,IAAMC,EAAmBC,8BAAoB,IACvCC,EAAiBC,cACjBC,EAAcC,0BAAgBH,GAC9BH,EAAQO,sBAAYnN,EAAS6M,EAAiBI,IAIpD,OAFAF,EAAeK,IAAIC,GAEZT,EUKKO,GAER5K,GAAQ+K,YAAe,CAC3B7K,QAAS,CACPK,QAAS,CACPH,KAAM,iBAERD,UAAW,CACTC,KAAM,oBAERH,WAAY,CACV+K,QAAS,uBAKTC,GAAM,kBACV,kBAAC,IAAD,CAAkBjL,MAAOA,IACvB,kBAACkL,EAAA,EAAD,MACA,kBAAC,IAAD,CAAUb,MAAOA,IACf,kBAAC,GAAD,KACE,kBAACc,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,IAAD,UC1CRC,IAASC,OAAO,mBDgDD,WACb,OACE,kBAAC,IAAD,CAAsB7G,MAAOoF,IAC3B,kBAAC,GAAD,SCnDU,MAAS0B,SAASC,eAAe,W","file":"static/js/main.dc3000ea.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type WeatherForLocation = {\n  description: string;\n  locationName: string;\n  temperatureinCelsius: number;\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  temperatureinCelsius: 0,\n  temperatureinFahrenheit: 0,\n  description: '',\n  locationName: '',\n};\n\nconst toF = (c: number) => (c * 9) / 5 + 32;\n\nconst slice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    weatherDataRecevied: (state, action: PayloadAction<WeatherForLocation>) => {\n      const { description, locationName, temperatureinCelsius } = action.payload;\n      state.temperatureinCelsius = temperatureinCelsius;\n      state.temperatureinFahrenheit = toF(temperatureinCelsius);\n      state.description = description;\n      state.locationName = locationName;\n    },\n    weatherApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n  },\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { actions as WeatherActions, ApiErrorAction } from './reducer';\nimport { PayloadAction } from 'redux-starter-kit';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(WeatherActions.weatherApiErrorReceived.type, apiErrorReceived);\n}\n","import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type Metrics = string[];\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  metrics: [] as Metrics,\n  selectedMetrics: [] as Metrics\n};\n\nconst slice = createSlice({\n  name: 'metrics',\n  initialState,\n  reducers: {\n    metricDataRecevied: (state, action: PayloadAction<Metrics>) => {\n      state.metrics = [...action.payload];\n    },\n    metricApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => {\n      console.log('error getting metrics');\n    },\n    metricSelectionUpdated: (state, action: PayloadAction<Metrics>) => {\n      state.selectedMetrics = action.payload;\n    }\n  },\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { actions as MetricActions, ApiErrorAction } from './reducer';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(MetricActions.metricApiErrorReceived.type, apiErrorReceived);\n}\n","import { all, spawn } from 'redux-saga/effects';\nimport weatherSaga from '../Features/Weather/saga';\nimport metricsSaga from '../Features/MetricDropDown/saga';\n\nexport default function* root() {\n  yield all([\n    spawn(weatherSaga),\n    spawn(metricsSaga)\n  ]);\n}\n","import { createSlice, PayloadAction } from 'redux-starter-kit';\nimport { NewMeasurement, MultipleMeasurements } from '../../models';\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  measurements: [] as MultipleMeasurements[],\n};\n\nconst slice = createSlice({\n  name: 'metricsChartData',\n  initialState,\n  reducers: {\n    measurementsDataRecevied: (state, action: PayloadAction<MultipleMeasurements[]>) => {\n      state.measurements = [...action.payload];\n    },\n    measurementsDataApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => {\n      console.log('error getting metrics measurement data');\n    },\n    newMeasurementDataReceived: (state, action: PayloadAction<NewMeasurement>) => {\n      const { newMeasurement } = action.payload;\n      const measurements = state.measurements.slice();\n      measurements.forEach((measurement) => {\n        if (measurement.metric === newMeasurement.metric) {\n          measurement.measurements.push(newMeasurement);\n          measurements.shift();\n        }\n      });\n    },\n  },\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { reducer as weatherReducer } from '../Features/Weather/reducer';\nimport { reducer as metricsReducer } from '../Features/MetricDropDown/reducer';\nimport { reducer as measurementsReducer } from '../Features/MetricChart/reducer';\n\nexport default {\n  weather: weatherReducer,\n  metrics: metricsReducer,\n  measurements: measurementsReducer\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { combineReducers } from 'redux-starter-kit';\nimport sagas from './sagas';\nimport reducers from './reducers';\n\nconst reducer = combineReducers(reducers);\nexport type IState = ReturnType<typeof reducer>;\n\nexport default () => {\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(reducer, composeEnhancers(middlewares));\n\n  sagaMiddleware.run(sagas);\n\n  return store;\n};\n","import Chip from '@material-ui/core/Chip';\nimport { withStyles, Theme } from '@material-ui/core/styles';\n\nconst cardStyles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.secondary.main,\n  },\n  label: {\n    color: theme.palette.primary.main,\n  },\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from './reducer';\nimport { useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Chip from '../../components/Chip';\nimport { IState } from '../../store';\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = (state: IState) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName,\n  };\n};\n\nexport default () => {\n  return <Weather />;\n};\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(getWeather);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong,\n    },\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.weatherApiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch(actions.weatherDataRecevied(getWeatherForLocation));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`} />;\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Weather from '../Features/Weather/Weather';\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"rao's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} EOG React Visualization Assessment\n        </Typography>\n        <Weather />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    height: '100vh',\n  },\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","import React, { useEffect, ChangeEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AutoComplete from '@material-ui/lab/Autocomplete';\nimport { TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useQuery } from 'urql';\nimport Chip from '../../components/Chip';\nimport { actions } from './reducer';\nimport { IState } from '../../store';\n\nconst useStyles = makeStyles({\n  container: {\n    width: '40%',\n    padding: '15px',\n  },\n  listItem: {\n    '&:hover': {\n      backgroundColor: '#bbdefb',\n    }\n  },\n});\n\nconst query = `\n  query {\n    getMetrics\n  }\n`;\n\nconst getMetrics = (state: IState) => {\n  return state.metrics\n};\n\nexport default () => {\n  return <MetricDropDown />;\n};\n\nconst MetricDropDown = () => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n  const { metrics, selectedMetrics } = useSelector(getMetrics);\n  const [result] = useQuery({ query, });\n\n  const { fetching, data, error } = result;\n\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.metricApiErrorReceived({ error: error.message, }));\n      return;\n    }\n\n    if (!data) return;\n\n    dispatch(actions.metricDataRecevied(data.getMetrics));\n  }, [dispatch, data, error]);\n\n  const onMetricSelection = (_: ChangeEvent<{}>, value: any) => {\n   if (value) {\n    dispatch(actions.metricSelectionUpdated(value));\n   } else {\n    dispatch(actions.metricSelectionUpdated([]));\n   }\n  }\n\n  const placeholder = selectedMetrics.length > 0 ? '': 'select...';\n\n  return (\n    <div className={styles.container}>\n      <AutoComplete\n        classes={{\n          option: styles.listItem,\n        }}\n        debug\n        filterSelectedOptions\n        loading={fetching}\n        multiple\n        options={metrics}\n        renderInput={(params) => <TextField {...params} placeholder={placeholder} variant=\"outlined\" />}\n        renderOption={(option) => <Typography variant=\"body2\">{option}</Typography>}\n        renderTags={(tags, getTagProps) => {\n          return tags.map((tag, index) => (\n            <Chip variant=\"outlined\" label={tag} {...getTagProps({ index })} />\n        ))}}\n        onChange={onMetricSelection}\n        value={selectedMetrics}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { IState } from '../../store';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexGrow: 1,\n    margin: '20px',\n    width: '60%',\n  },\n  card: {\n    marginRight: '1rem',\n    marginBottom: '1rem',\n  },\n});\n\nconst getSelectedMetrics = (state: IState) => state.metrics.selectedMetrics;\nconst getMeasurements = (state: IState) => state.measurements.measurements;\n\nexport default () => {\n  const classes = useStyles();\n  const selectedMetrics = useSelector(getSelectedMetrics);\n  const measurements = useSelector(getMeasurements);\n\n  const latestValues = React.useMemo(() => {\n    const list = [] as { name: string, value: number }[] ;\n    measurements.forEach((measurement) => {\n      selectedMetrics.forEach((metricName) => {\n        if (measurement.metric === metricName) {\n          const [latestValue] = measurement.measurements.slice(-1);\n          list.push({\n            name: metricName,\n            value: latestValue.value\n          });\n        }\n      });\n    });\n    return list;\n  }, [measurements, selectedMetrics]);\n\n  return (\n    <section className={classes.root}>\n        {latestValues.map(({ name, value }) => (\n          <Card className={classes.card} key={`metric-${name}`}>\n            <CardContent>\n              <Typography variant=\"h6\">{name}</Typography>\n              <Typography variant=\"h3\">{value}</Typography>\n            </CardContent>\n          </Card>\n        ))}\n    </section>\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useQuery, useSubscription } from 'urql';\nimport { IState } from '../../store';\nimport { Measurement, NewMeasurement, MultipleMeasurements } from '../../models';\n\nimport { actions } from './reducer';\n\nconst query = `\n\tquery($measurementQuery: [MeasurementQuery]) {\n\t\tgetMultipleMeasurements(input: $measurementQuery) {\n\t\t\tmetric,\n\t\t\tmeasurements {\n\t\t\t\tat,\n\t\t\t\tmetric,\n\t\t\t\tvalue,\n\t\t\t\tunit\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst metricSubscriptionQuery = `\n  subscription {\n    newMeasurement{\n      metric\n      at\n      value\n      unit\n    }\n  }\n`;\n\nconst getSelectedMetrics = (state: IState) => state.metrics;\n\nconst getMeasurements = (state: IState) => [...state.measurements.measurements];\n\nconst currentTime = new Date().valueOf();\nconst thirtyMinutes = (90 * 60 * 1000);\nconst after = currentTime - thirtyMinutes;\n\nexport const useMetricChart = () => {\n  const measurements = useSelector(getMeasurements);\n  const { selectedMetrics } = useSelector(getSelectedMetrics);\n  const dispatch = useDispatch();\n\n  const [subscriptionResult] = useSubscription<NewMeasurement>({\n    query: metricSubscriptionQuery,\n    variables: {},\n  });\n\n  const measurementQuery = React.useMemo(() => {\n    return selectedMetrics.map((metricName) => ({\n      metricName,\n      after,\n    }));\n  }, [selectedMetrics]);\n\n  const chartData = React.useMemo(() => {\n    const newChartData: Measurement[][] = [];\n   \n    measurements.forEach((item) => newChartData.push(item.measurements));\n  \n    const mappedData = newChartData.flat().map(item => {\n      const newValue = { ...item };\n      newValue[newValue.metric] = newValue.value;\n      return newValue;\n    });\n\n    return mappedData;\n  }, [measurements]);\n\n  const [result, executeQuery] = useQuery<{ getMultipleMeasurements: MultipleMeasurements[] }>({\n    query,\n    variables: {\n      measurementQuery,\n\t\t},\n\t\tpause: measurementQuery.length === 0,\n  });\n\n  const { data } = result;\n\n  React.useEffect(() => {\n    if (!data) return;\n\n\t\tconst { getMultipleMeasurements } = data;\n\n    dispatch(actions.measurementsDataRecevied(getMultipleMeasurements));\n  }, [data, dispatch, executeQuery]);\n\n  React.useEffect(() => {\n    if (subscriptionResult.data) {\n      dispatch(actions.newMeasurementDataReceived(subscriptionResult.data));\n    }\n  }, [dispatch, subscriptionResult]);\n\n  return {\n    chartData,\n    selectedMetrics,\n  };\n};\n","import React from 'react';\nimport moment from 'moment';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Label, ResponsiveContainer, Tooltip} from 'recharts';\n\nimport { useMetricChart } from './useMetricChart';\n\nexport default () => (\n  <MetricChart />\n);\n\nconst MetricChart = () => {\n  const { chartData, selectedMetrics } = useMetricChart();\n\n  const xAxisTickFormatter = (date: number) => {\n    return moment.unix(date).format(\"LT\");\n  };\n\n\n  const hasTempData = selectedMetrics.some((item) => ['waterTemp', 'oilTemp', 'flareTemp'].includes(item));\n  const hasPSIData = selectedMetrics.some((item) => ['tubingPressure', 'casingPressure'].includes(item));\n  const hasInjData = selectedMetrics.some((item) => ['injValveOpen'].includes(item));\n\n  if (chartData.length === 0) {\n    return null;\n  }\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={500}>\n      <LineChart\n        data={chartData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        dataKey=\"at\"\n        domain={['auto', 'auto']}\n        type=\"number\"\n        tickFormatter={xAxisTickFormatter}\n      />\n      {hasTempData && (\n        <YAxis\n          orientation=\"left\"\n          yAxisId=\"F\"\n        >\n          <Label\n            offset={20}\n            position=\"bottom\"\n            style={{ textAnchor: \"middle\" }}\n            value=\"F\"\n          />\n        </YAxis>\n      )}\n      {hasPSIData && (\n        <YAxis yAxisId=\"PSI\">\n          <Label\n            offset={20}\n            position=\"bottom\"\n            style={{ textAnchor: \"middle\" }}\n            value=\"PSI\"\n          />\n        </YAxis>\n      )}\n      {hasInjData && (\n        <YAxis\n          orientation=\"left\"\n          yAxisId=\"%\"\n        >\n          <Label\n            offset={20}\n            position=\"bottom\"\n            style={{ textAnchor: \"middle\" }}\n            value=\"%\"\n          />\n        </YAxis>\n      )}\n      <Legend />\n      <Tooltip labelFormatter={(label) => moment(label).format('LLLL')} />\n      {selectedMetrics.length > 0\n        ? selectedMetrics.map(metricName => {\n            const color = colorCodes[metricName] as string;\n            switch(metricName) {\n              case 'waterTemp':\n              case 'flareTemp':\n              case 'oilTemp':\n                return (\n                  <Line\n                    activeDot={{ r: 5 }}\n                    dataKey={metricName}\n                    dot={false}\n                    isAnimationActive={false}\n                    name={metricName}\n                    key={`line-${metricName}`}\n                    stroke={color}\n                    type=\"monotone\"\n                    yAxisId=\"F\"\n                  />\n                );\n              case 'tubingPressure':\n              case 'casingPressure':\n                return (\n                  <Line\n                    activeDot={{ r: 5 }}\n                    dataKey={metricName}\n                    dot={false}\n                    isAnimationActive={false}\n                    key={`line-${metricName}`}\n                    name={metricName}\n                    stroke={color}\n                    type=\"monotone\"\n                    yAxisId=\"PSI\"\n                  />\n                );\n              case 'injValveOpen':\n                return (\n                  <Line\n                    activeDot={{ r: 5 }}\n                    dataKey={metricName}\n                    dot={false}\n                    isAnimationActive={false}\n                    key={`line-${metricName}`}\n                    name={metricName}\n                    stroke={color}\n                    type=\"monotone\"\n                    yAxisId=\"%\"\n                  />\n                );\n              default:\n                return null;\n            }\n          })\n        :\n      null}\n    </LineChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst colorCodes = {\n  oilTemp: '#311B92',\n  waterTemp: '#F57F17',\n  flareTemp: '#FFAB00',\n  tubingPressure: '#BF360C',\n  casingPressure: '#880E4F',\n  injValveOpen: '#006064',\n} as { [x: string]: string};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { MetricDropDown } from '../MetricDropDown';\nimport { SelectedMetricList } from '../SelectedMetricList';\nimport { MetricChart } from '../MetricChart';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  metrics: {\n    display: 'flex'\n  },\n});\n\nexport default () => {\n  return <Dashboard />;\n};\n\nconst Dashboard = () => {\n  const styles = useStyles();\n\n  return (\n    <article className={styles.container}>\n      <div className={styles.metrics}>\n        <SelectedMetricList />\n        <MetricDropDown />\n      </div>\n      <MetricChart />\n    </article>\n  );\n};\n","import React from 'react';\nimport createStore from './store';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport { Provider as ApolloClientProvider, createClient, subscriptionExchange, defaultExchanges } from 'urql';\nimport {SubscriptionClient} from 'subscriptions-transport-ws';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\nimport Dashboard from './Features/Dashboard/Dashboard';\n\nconst subscriptionClient = new SubscriptionClient('ws://react.eogresources.com/graphql', { reconnect: true});\n\nconst client = createClient({\n  url: \"https://react.eogresources.com/graphql\",\n  exchanges: [...defaultExchanges, subscriptionExchange({\n    forwardSubscription: operation =>\n    subscriptionClient.request(operation)\n  })],\n});\n\nconst store = createStore();\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: 'rgb(39,49,66)',\n    },\n    secondary: {\n      main: 'rgb(197,208,222)',\n    },\n    background: {\n      default: 'rgb(226,231,238)',\n    },\n  }\n});\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Provider store={store}>\n      <Wrapper>\n        <Header />\n        <Dashboard />\n        <ToastContainer />\n      </Wrapper>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default () => {\n  return (\n    <ApolloClientProvider value={client}>\n      <App />\n    </ApolloClientProvider>\n  )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}